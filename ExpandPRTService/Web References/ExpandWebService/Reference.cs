//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4952.
// 
#pragma warning disable 1591

namespace SF.Expand.Switch.ExpandWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://sf.expand.com/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private eXPandWSInHeader eXPandWSInHeaderValueField;
        
        private eXPandWSOutHeader eXPandWSOutHeaderValueField;
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunSwitchPipelineOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunCardPipelineOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFileProcessorOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFileLoggerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFlexCubeFilesProcessorOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDRCCProcessFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDRCCExecuteOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDRCCSimulateOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunEchoPipelineOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunPRTStatusPipelineOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessJeEmisRecordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFiles2EmisInitLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunFiles2EmisFinishLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReprocessJeRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunPS2TransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::SF.Expand.Switch.Properties.Settings.Default.ExpandPRTService_ExpandWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public eXPandWSInHeader eXPandWSInHeaderValue {
            get {
                return this.eXPandWSInHeaderValueField;
            }
            set {
                this.eXPandWSInHeaderValueField = value;
            }
        }
        
        public eXPandWSOutHeader eXPandWSOutHeaderValue {
            get {
                return this.eXPandWSOutHeaderValueField;
            }
            set {
                this.eXPandWSOutHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event RunSwitchPipelineCompletedEventHandler RunSwitchPipelineCompleted;
        
        /// <remarks/>
        public event RunCardPipelineCompletedEventHandler RunCardPipelineCompleted;
        
        /// <remarks/>
        public event RunFileProcessorCompletedEventHandler RunFileProcessorCompleted;
        
        /// <remarks/>
        public event RunFileLoggerCompletedEventHandler RunFileLoggerCompleted;
        
        /// <remarks/>
        public event RunFlexCubeFilesProcessorCompletedEventHandler RunFlexCubeFilesProcessorCompleted;
        
        /// <remarks/>
        public event RunDRCCProcessFileCompletedEventHandler RunDRCCProcessFileCompleted;
        
        /// <remarks/>
        public event RunDRCCExecuteCompletedEventHandler RunDRCCExecuteCompleted;
        
        /// <remarks/>
        public event RunDRCCSimulateCompletedEventHandler RunDRCCSimulateCompleted;
        
        /// <remarks/>
        public event RunEchoPipelineCompletedEventHandler RunEchoPipelineCompleted;
        
        /// <remarks/>
        public event RunPRTStatusPipelineCompletedEventHandler RunPRTStatusPipelineCompleted;
        
        /// <remarks/>
        public event GetAccountNameCompletedEventHandler GetAccountNameCompleted;
        
        /// <remarks/>
        public event ProcessJeEmisRecordsCompletedEventHandler ProcessJeEmisRecordsCompleted;
        
        /// <remarks/>
        public event RunFiles2EmisInitLogCompletedEventHandler RunFiles2EmisInitLogCompleted;
        
        /// <remarks/>
        public event RunFiles2EmisFinishLogCompletedEventHandler RunFiles2EmisFinishLogCompleted;
        
        /// <remarks/>
        public event ReprocessJeRecordCompletedEventHandler ReprocessJeRecordCompleted;
        
        /// <remarks/>
        public event RunPS2TransactionCompletedEventHandler RunPS2TransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/HelloWorld", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunSwitchPipeline", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("switchResponse", DataType="base64Binary")]
        public byte[] RunSwitchPipeline([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] prtClientMsg) {
            object[] results = this.Invoke("RunSwitchPipeline", new object[] {
                        prtClientMsg});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void RunSwitchPipelineAsync(byte[] prtClientMsg) {
            this.RunSwitchPipelineAsync(prtClientMsg, null);
        }
        
        /// <remarks/>
        public void RunSwitchPipelineAsync(byte[] prtClientMsg, object userState) {
            if ((this.RunSwitchPipelineOperationCompleted == null)) {
                this.RunSwitchPipelineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunSwitchPipelineOperationCompleted);
            }
            this.InvokeAsync("RunSwitchPipeline", new object[] {
                        prtClientMsg}, this.RunSwitchPipelineOperationCompleted, userState);
        }
        
        private void OnRunSwitchPipelineOperationCompleted(object arg) {
            if ((this.RunSwitchPipelineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunSwitchPipelineCompleted(this, new RunSwitchPipelineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunCardPipeline", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunCardPipeline(string ServiceCode, string AccountNumber, string Amount, string CurrencyCode) {
            object[] results = this.Invoke("RunCardPipeline", new object[] {
                        ServiceCode,
                        AccountNumber,
                        Amount,
                        CurrencyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunCardPipelineAsync(string ServiceCode, string AccountNumber, string Amount, string CurrencyCode) {
            this.RunCardPipelineAsync(ServiceCode, AccountNumber, Amount, CurrencyCode, null);
        }
        
        /// <remarks/>
        public void RunCardPipelineAsync(string ServiceCode, string AccountNumber, string Amount, string CurrencyCode, object userState) {
            if ((this.RunCardPipelineOperationCompleted == null)) {
                this.RunCardPipelineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunCardPipelineOperationCompleted);
            }
            this.InvokeAsync("RunCardPipeline", new object[] {
                        ServiceCode,
                        AccountNumber,
                        Amount,
                        CurrencyCode}, this.RunCardPipelineOperationCompleted, userState);
        }
        
        private void OnRunCardPipelineOperationCompleted(object arg) {
            if ((this.RunCardPipelineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunCardPipelineCompleted(this, new RunCardPipelineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunFileProcessor", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFileProcessor(string FilePath, string ERMBFileName, string CCLNFileName, string EDSTFileName, string EORIFileName) {
            object[] results = this.Invoke("RunFileProcessor", new object[] {
                        FilePath,
                        ERMBFileName,
                        CCLNFileName,
                        EDSTFileName,
                        EORIFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFileProcessorAsync(string FilePath, string ERMBFileName, string CCLNFileName, string EDSTFileName, string EORIFileName) {
            this.RunFileProcessorAsync(FilePath, ERMBFileName, CCLNFileName, EDSTFileName, EORIFileName, null);
        }
        
        /// <remarks/>
        public void RunFileProcessorAsync(string FilePath, string ERMBFileName, string CCLNFileName, string EDSTFileName, string EORIFileName, object userState) {
            if ((this.RunFileProcessorOperationCompleted == null)) {
                this.RunFileProcessorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFileProcessorOperationCompleted);
            }
            this.InvokeAsync("RunFileProcessor", new object[] {
                        FilePath,
                        ERMBFileName,
                        CCLNFileName,
                        EDSTFileName,
                        EORIFileName}, this.RunFileProcessorOperationCompleted, userState);
        }
        
        private void OnRunFileProcessorOperationCompleted(object arg) {
            if ((this.RunFileProcessorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFileProcessorCompleted(this, new RunFileProcessorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunFileLogger", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFileLogger(string FilePath) {
            object[] results = this.Invoke("RunFileLogger", new object[] {
                        FilePath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFileLoggerAsync(string FilePath) {
            this.RunFileLoggerAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void RunFileLoggerAsync(string FilePath, object userState) {
            if ((this.RunFileLoggerOperationCompleted == null)) {
                this.RunFileLoggerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFileLoggerOperationCompleted);
            }
            this.InvokeAsync("RunFileLogger", new object[] {
                        FilePath}, this.RunFileLoggerOperationCompleted, userState);
        }
        
        private void OnRunFileLoggerOperationCompleted(object arg) {
            if ((this.RunFileLoggerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFileLoggerCompleted(this, new RunFileLoggerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunFlexCubeFilesProcessor", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFlexCubeFilesProcessor(string FileName) {
            object[] results = this.Invoke("RunFlexCubeFilesProcessor", new object[] {
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFlexCubeFilesProcessorAsync(string FileName) {
            this.RunFlexCubeFilesProcessorAsync(FileName, null);
        }
        
        /// <remarks/>
        public void RunFlexCubeFilesProcessorAsync(string FileName, object userState) {
            if ((this.RunFlexCubeFilesProcessorOperationCompleted == null)) {
                this.RunFlexCubeFilesProcessorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFlexCubeFilesProcessorOperationCompleted);
            }
            this.InvokeAsync("RunFlexCubeFilesProcessor", new object[] {
                        FileName}, this.RunFlexCubeFilesProcessorOperationCompleted, userState);
        }
        
        private void OnRunFlexCubeFilesProcessorOperationCompleted(object arg) {
            if ((this.RunFlexCubeFilesProcessorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFlexCubeFilesProcessorCompleted(this, new RunFlexCubeFilesProcessorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunDRCCProcessFile", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunDRCCProcessFile(string FilePathName, bool ForcedFile) {
            object[] results = this.Invoke("RunDRCCProcessFile", new object[] {
                        FilePathName,
                        ForcedFile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunDRCCProcessFileAsync(string FilePathName, bool ForcedFile) {
            this.RunDRCCProcessFileAsync(FilePathName, ForcedFile, null);
        }
        
        /// <remarks/>
        public void RunDRCCProcessFileAsync(string FilePathName, bool ForcedFile, object userState) {
            if ((this.RunDRCCProcessFileOperationCompleted == null)) {
                this.RunDRCCProcessFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDRCCProcessFileOperationCompleted);
            }
            this.InvokeAsync("RunDRCCProcessFile", new object[] {
                        FilePathName,
                        ForcedFile}, this.RunDRCCProcessFileOperationCompleted, userState);
        }
        
        private void OnRunDRCCProcessFileOperationCompleted(object arg) {
            if ((this.RunDRCCProcessFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDRCCProcessFileCompleted(this, new RunDRCCProcessFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunDRCCExecute", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunDRCCExecute(int DRCCFileId) {
            object[] results = this.Invoke("RunDRCCExecute", new object[] {
                        DRCCFileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunDRCCExecuteAsync(int DRCCFileId) {
            this.RunDRCCExecuteAsync(DRCCFileId, null);
        }
        
        /// <remarks/>
        public void RunDRCCExecuteAsync(int DRCCFileId, object userState) {
            if ((this.RunDRCCExecuteOperationCompleted == null)) {
                this.RunDRCCExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDRCCExecuteOperationCompleted);
            }
            this.InvokeAsync("RunDRCCExecute", new object[] {
                        DRCCFileId}, this.RunDRCCExecuteOperationCompleted, userState);
        }
        
        private void OnRunDRCCExecuteOperationCompleted(object arg) {
            if ((this.RunDRCCExecuteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDRCCExecuteCompleted(this, new RunDRCCExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunDRCCSimulate", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunDRCCSimulate(int DRCCFileId) {
            object[] results = this.Invoke("RunDRCCSimulate", new object[] {
                        DRCCFileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunDRCCSimulateAsync(int DRCCFileId) {
            this.RunDRCCSimulateAsync(DRCCFileId, null);
        }
        
        /// <remarks/>
        public void RunDRCCSimulateAsync(int DRCCFileId, object userState) {
            if ((this.RunDRCCSimulateOperationCompleted == null)) {
                this.RunDRCCSimulateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDRCCSimulateOperationCompleted);
            }
            this.InvokeAsync("RunDRCCSimulate", new object[] {
                        DRCCFileId}, this.RunDRCCSimulateOperationCompleted, userState);
        }
        
        private void OnRunDRCCSimulateOperationCompleted(object arg) {
            if ((this.RunDRCCSimulateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDRCCSimulateCompleted(this, new RunDRCCSimulateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunEchoPipeline", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("FlexCubeAtmState")]
        public string RunEchoPipeline(out string FlexCubePosState, out string PRTState) {
            object[] results = this.Invoke("RunEchoPipeline", new object[0]);
            FlexCubePosState = ((string)(results[1]));
            PRTState = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunEchoPipelineAsync() {
            this.RunEchoPipelineAsync(null);
        }
        
        /// <remarks/>
        public void RunEchoPipelineAsync(object userState) {
            if ((this.RunEchoPipelineOperationCompleted == null)) {
                this.RunEchoPipelineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunEchoPipelineOperationCompleted);
            }
            this.InvokeAsync("RunEchoPipeline", new object[0], this.RunEchoPipelineOperationCompleted, userState);
        }
        
        private void OnRunEchoPipelineOperationCompleted(object arg) {
            if ((this.RunEchoPipelineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunEchoPipelineCompleted(this, new RunEchoPipelineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunPRTStatusPipeline", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunPRTStatusPipeline(string PRTStatus) {
            this.Invoke("RunPRTStatusPipeline", new object[] {
                        PRTStatus});
        }
        
        /// <remarks/>
        public void RunPRTStatusPipelineAsync(string PRTStatus) {
            this.RunPRTStatusPipelineAsync(PRTStatus, null);
        }
        
        /// <remarks/>
        public void RunPRTStatusPipelineAsync(string PRTStatus, object userState) {
            if ((this.RunPRTStatusPipelineOperationCompleted == null)) {
                this.RunPRTStatusPipelineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunPRTStatusPipelineOperationCompleted);
            }
            this.InvokeAsync("RunPRTStatusPipeline", new object[] {
                        PRTStatus}, this.RunPRTStatusPipelineOperationCompleted, userState);
        }
        
        private void OnRunPRTStatusPipelineOperationCompleted(object arg) {
            if ((this.RunPRTStatusPipelineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunPRTStatusPipelineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSInHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("eXPandWSOutHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/GetAccountName", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountName(string AccountNumber) {
            object[] results = this.Invoke("GetAccountName", new object[] {
                        AccountNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountNameAsync(string AccountNumber) {
            this.GetAccountNameAsync(AccountNumber, null);
        }
        
        /// <remarks/>
        public void GetAccountNameAsync(string AccountNumber, object userState) {
            if ((this.GetAccountNameOperationCompleted == null)) {
                this.GetAccountNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountNameOperationCompleted);
            }
            this.InvokeAsync("GetAccountName", new object[] {
                        AccountNumber}, this.GetAccountNameOperationCompleted, userState);
        }
        
        private void OnGetAccountNameOperationCompleted(object arg) {
            if ((this.GetAccountNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountNameCompleted(this, new GetAccountNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/ProcessJeEmisRecords", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcessJeEmisRecords() {
            this.Invoke("ProcessJeEmisRecords", new object[0]);
        }
        
        /// <remarks/>
        public void ProcessJeEmisRecordsAsync() {
            this.ProcessJeEmisRecordsAsync(null);
        }
        
        /// <remarks/>
        public void ProcessJeEmisRecordsAsync(object userState) {
            if ((this.ProcessJeEmisRecordsOperationCompleted == null)) {
                this.ProcessJeEmisRecordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessJeEmisRecordsOperationCompleted);
            }
            this.InvokeAsync("ProcessJeEmisRecords", new object[0], this.ProcessJeEmisRecordsOperationCompleted, userState);
        }
        
        private void OnProcessJeEmisRecordsOperationCompleted(object arg) {
            if ((this.ProcessJeEmisRecordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessJeEmisRecordsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunFiles2EmisInitLog", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFiles2EmisInitLog(string FileId) {
            object[] results = this.Invoke("RunFiles2EmisInitLog", new object[] {
                        FileId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFiles2EmisInitLogAsync(string FileId) {
            this.RunFiles2EmisInitLogAsync(FileId, null);
        }
        
        /// <remarks/>
        public void RunFiles2EmisInitLogAsync(string FileId, object userState) {
            if ((this.RunFiles2EmisInitLogOperationCompleted == null)) {
                this.RunFiles2EmisInitLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFiles2EmisInitLogOperationCompleted);
            }
            this.InvokeAsync("RunFiles2EmisInitLog", new object[] {
                        FileId}, this.RunFiles2EmisInitLogOperationCompleted, userState);
        }
        
        private void OnRunFiles2EmisInitLogOperationCompleted(object arg) {
            if ((this.RunFiles2EmisInitLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFiles2EmisInitLogCompleted(this, new RunFiles2EmisInitLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunFiles2EmisFinishLog", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunFiles2EmisFinishLog(string FileId, string je, string TextoErro) {
            object[] results = this.Invoke("RunFiles2EmisFinishLog", new object[] {
                        FileId,
                        je,
                        TextoErro});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunFiles2EmisFinishLogAsync(string FileId, string je, string TextoErro) {
            this.RunFiles2EmisFinishLogAsync(FileId, je, TextoErro, null);
        }
        
        /// <remarks/>
        public void RunFiles2EmisFinishLogAsync(string FileId, string je, string TextoErro, object userState) {
            if ((this.RunFiles2EmisFinishLogOperationCompleted == null)) {
                this.RunFiles2EmisFinishLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunFiles2EmisFinishLogOperationCompleted);
            }
            this.InvokeAsync("RunFiles2EmisFinishLog", new object[] {
                        FileId,
                        je,
                        TextoErro}, this.RunFiles2EmisFinishLogOperationCompleted, userState);
        }
        
        private void OnRunFiles2EmisFinishLogOperationCompleted(object arg) {
            if ((this.RunFiles2EmisFinishLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunFiles2EmisFinishLogCompleted(this, new RunFiles2EmisFinishLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/ReprocessJeRecord", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReprocessJeRecord(int Je) {
            object[] results = this.Invoke("ReprocessJeRecord", new object[] {
                        Je});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReprocessJeRecordAsync(int Je) {
            this.ReprocessJeRecordAsync(Je, null);
        }
        
        /// <remarks/>
        public void ReprocessJeRecordAsync(int Je, object userState) {
            if ((this.ReprocessJeRecordOperationCompleted == null)) {
                this.ReprocessJeRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReprocessJeRecordOperationCompleted);
            }
            this.InvokeAsync("ReprocessJeRecord", new object[] {
                        Je}, this.ReprocessJeRecordOperationCompleted, userState);
        }
        
        private void OnReprocessJeRecordOperationCompleted(object arg) {
            if ((this.ReprocessJeRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReprocessJeRecordCompleted(this, new ReprocessJeRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://sf.expand.com/RunPS2Transaction", RequestNamespace="http://sf.expand.com/", ResponseNamespace="http://sf.expand.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RunPS2Transaction(string ServiceId, string CardNumber, string DebitAccountNumber, string CreditAccountNumber, string Amount, string CurrencyCode) {
            object[] results = this.Invoke("RunPS2Transaction", new object[] {
                        ServiceId,
                        CardNumber,
                        DebitAccountNumber,
                        CreditAccountNumber,
                        Amount,
                        CurrencyCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RunPS2TransactionAsync(string ServiceId, string CardNumber, string DebitAccountNumber, string CreditAccountNumber, string Amount, string CurrencyCode) {
            this.RunPS2TransactionAsync(ServiceId, CardNumber, DebitAccountNumber, CreditAccountNumber, Amount, CurrencyCode, null);
        }
        
        /// <remarks/>
        public void RunPS2TransactionAsync(string ServiceId, string CardNumber, string DebitAccountNumber, string CreditAccountNumber, string Amount, string CurrencyCode, object userState) {
            if ((this.RunPS2TransactionOperationCompleted == null)) {
                this.RunPS2TransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunPS2TransactionOperationCompleted);
            }
            this.InvokeAsync("RunPS2Transaction", new object[] {
                        ServiceId,
                        CardNumber,
                        DebitAccountNumber,
                        CreditAccountNumber,
                        Amount,
                        CurrencyCode}, this.RunPS2TransactionOperationCompleted, userState);
        }
        
        private void OnRunPS2TransactionOperationCompleted(object arg) {
            if ((this.RunPS2TransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunPS2TransactionCompleted(this, new RunPS2TransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sf.expand.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://sf.expand.com/", IsNullable=false)]
    public partial class eXPandWSInHeader : System.Web.Services.Protocols.SoapHeader {
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.4927")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://sf.expand.com/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://sf.expand.com/", IsNullable=false)]
    public partial class eXPandWSOutHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string eXPandErrorCodeField;
        
        private string eXPandErrorDescriptionField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string eXPandErrorCode {
            get {
                return this.eXPandErrorCodeField;
            }
            set {
                this.eXPandErrorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string eXPandErrorDescription {
            get {
                return this.eXPandErrorDescriptionField;
            }
            set {
                this.eXPandErrorDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunSwitchPipelineCompletedEventHandler(object sender, RunSwitchPipelineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunSwitchPipelineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunSwitchPipelineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunCardPipelineCompletedEventHandler(object sender, RunCardPipelineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunCardPipelineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunCardPipelineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunFileProcessorCompletedEventHandler(object sender, RunFileProcessorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFileProcessorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFileProcessorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunFileLoggerCompletedEventHandler(object sender, RunFileLoggerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFileLoggerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFileLoggerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunFlexCubeFilesProcessorCompletedEventHandler(object sender, RunFlexCubeFilesProcessorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFlexCubeFilesProcessorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFlexCubeFilesProcessorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunDRCCProcessFileCompletedEventHandler(object sender, RunDRCCProcessFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunDRCCProcessFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunDRCCProcessFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunDRCCExecuteCompletedEventHandler(object sender, RunDRCCExecuteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunDRCCExecuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunDRCCExecuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunDRCCSimulateCompletedEventHandler(object sender, RunDRCCSimulateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunDRCCSimulateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunDRCCSimulateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunEchoPipelineCompletedEventHandler(object sender, RunEchoPipelineCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunEchoPipelineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunEchoPipelineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FlexCubePosState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string PRTState {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunPRTStatusPipelineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAccountNameCompletedEventHandler(object sender, GetAccountNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ProcessJeEmisRecordsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunFiles2EmisInitLogCompletedEventHandler(object sender, RunFiles2EmisInitLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFiles2EmisInitLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFiles2EmisInitLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunFiles2EmisFinishLogCompletedEventHandler(object sender, RunFiles2EmisFinishLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunFiles2EmisFinishLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunFiles2EmisFinishLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReprocessJeRecordCompletedEventHandler(object sender, ReprocessJeRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReprocessJeRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReprocessJeRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void RunPS2TransactionCompletedEventHandler(object sender, RunPS2TransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunPS2TransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunPS2TransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591